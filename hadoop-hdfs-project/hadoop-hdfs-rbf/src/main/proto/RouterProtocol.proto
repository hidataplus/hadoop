/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";
option java_package = "org.apache.hadoop.hdfs.protocol.proto";
option java_outer_classname = "RouterProtocolProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
package hadoop.hdfs.router;

import "FederationProtocol.proto";

service RouterAdminProtocolService {
  /**
   * Add a mount table entry.
   */
  rpc addMountTableEntry(AddMountTableEntryRequestProto) returns(AddMountTableEntryResponseProto);

  /**
   * Update an existing mount table entry without copying files.
   */
  rpc updateMountTableEntry(UpdateMountTableEntryRequestProto) returns(UpdateMountTableEntryResponseProto);

  /**
   * Remove a mount table entry.
   */
  rpc removeMountTableEntry(RemoveMountTableEntryRequestProto) returns(RemoveMountTableEntryResponseProto);

  /**
   * Get matching mount entries
   */
  rpc getMountTableEntries(GetMountTableEntriesRequestProto) returns(GetMountTableEntriesResponseProto);

  /**
   * Transform Router state to safe mode state.
   */
  rpc enterSafeMode(EnterSafeModeRequestProto) returns (EnterSafeModeResponseProto);

  /**
   * Transform Router state from safe mode to running state.
   */
  rpc leaveSafeMode(LeaveSafeModeRequestProto) returns (LeaveSafeModeResponseProto);

  /**
   * Verify if current Router state is safe mode state.
   */
  rpc getSafeMode(GetSafeModeRequestProto) returns (GetSafeModeResponseProto);

  /**
   * Disable a name service.
   */
  rpc disableNameservice(DisableNameserviceRequestProto) returns (DisableNameserviceResponseProto);

  /**
   * Enable a name service.
   */
  rpc enableNameservice(EnableNameserviceRequestProto) returns (EnableNameserviceResponseProto);

  /**
   * Get the list of disabled name services.
   */
  rpc getDisabledNameservices(GetDisabledNameservicesRequestProto) returns (GetDisabledNameservicesResponseProto);

  /**
   * Refresh mount entries
   */
  rpc refreshMountTableEntries(RefreshMountTableEntriesRequestProto) returns(RefreshMountTableEntriesResponseProto);

  /**
   * Get the destination of a file/directory in the federation.
   */
  rpc getDestination(GetDestinationRequestProto) returns (GetDestinationResponseProto);

  /**
   * Refresh superuser proxy groups mappings on Router.
   */
  rpc refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequestProto) returns (RefreshSuperUserGroupsConfigurationResponseProto);
}