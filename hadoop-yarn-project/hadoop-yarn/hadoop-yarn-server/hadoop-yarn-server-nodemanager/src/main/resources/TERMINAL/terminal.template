<!DOCTYPE html>
<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->
  <html>
    <head>
      <meta charset="utf-8"/>
      <link rel="stylesheet" href="xterm/dist/xterm.css" />
      <link rel="stylesheet" href="css/style.css" />
      <script src="xterm/dist/xterm.js"></script>
      <script src="xterm/dist/addons/attach/attach.js"></script>
      <script src="xterm/dist/addons/fit/fit.js"></script>
      <script src="xterm/dist/addons/winptyCompat/winptyCompat.js"></script>
      <script src="xterm/dist/addons/fullscreen/fullscreen.js"></script>
    </head>
    <body>
      <div class="container">
        <div id="terminal-container"></div>
      </div>
      <script>
        function getQueryVariable(variable) {
          var query = window.location.search.substring(1);
          var vars = query.split('&');
          for (var i = 0; i < vars.length; i++) {
            var pair = vars[i].split('=');
            if (decodeURIComponent(pair[0]) == variable) {
              return decodeURIComponent(pair[1]);
            }
          }
          return null;
        }

        Terminal.applyAddon(attach);
        Terminal.applyAddon(fit);
        Terminal.applyAddon(winptyCompat);
        Terminal.applyAddon(fullscreen);
        var term = new Terminal({
                fontSize: 13,
                fontFamily: '"Menlo for Powerline", Menlo, Consolas, "Liberation Mono", Courier, monospace',
                theme: {
                    foreground: '#d2d2d2',
                    background: '#2b2b2b',
                    cursor: '#adadad',
                    black: '#000000',
                    red: '#d81e00',
                    green: '#5ea702',
                    yellow: '#cfae00',
                    blue: '#427ab3',
                    magenta: '#89658e',
                    cyan: '#00a7aa',
                    white: '#dbded8',
                    brightBlack: '#686a66',
                    brightRed: '#f54235',
                    brightGreen: '#99e343',
                    brightYellow: '#fdeb61',
                    brightBlue: '#84b0d8',
                    brightMagenta: '#bc94b7',
                    brightCyan: '#37e6e8',
                    brightWhite: '#f1f1f0'
                }
            }),
            container = document.getElementById('terminal-container'),
            socketUrl = document.getElementById('socket-url'),
            socketForm = document.getElementById('socket-form');

        var arr = window.location.href.split("/");
        var protocol = "ws://";
        if (window.location.protocol=="https:") {
          protocol = "wss://";
        }
        var url = "ws://" + window.location.hostname + ":" + window.location.port
            + "/container/" + getQueryVariable("container");
        var user = getQueryVariable("user.name");
        if (user != null) {
          url = url + "?user.name=" + encodeURI(user);
        }
        document.title = getQueryVariable("container");
        console.log(url);
        var sock = new WebSocket(url);
        sock.addEventListener('open', function () {
          term.attach(sock, true, true);
        });
        sock.addEventListener('close', function(event) {
          switch(event.code) {
            case 1000:
              term.write('Remote Connection closed.');
              break;
            case 1008:
              term.write('Remote Connection refused.');
              break;
            case 1001:
              term.write('Remote Connection going away.');
              break;
            case 1003:
              term.write('Nonsecure mode is unsupported.');
              break;
          }
        });
        term.open(container);
        term.winptyCompatInit();
        term.fit();
        term.toggleFullScreen(true);
        term.focus();
        function ping() {
          if (sock.readyState === WebSocket.OPEN) {
            sock.send("1{}");
          } else if(sock.readyState === WebSocket.CLOSED) {
            clearInterval(pingTimer);
          }
        }
        var pingTimer = setInterval(ping, 100);
      </script>
    </body>
  </html>
